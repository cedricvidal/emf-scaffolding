grammar org.eclipselabs.emf.scaffolding.language.EMFScaffoldingDSL with org.eclipse.xtext.common.Terminals

generate emfscaffoldingdsl "http://www.eclipselabs.org/emf/scaffolding/1.0.0"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

Scaffolding :
	scaffold=Scaffold
	(elements+=ScaffoldingElement)*
	;

ScaffoldingElement : Rule | Function;

Scaffold:
	'scaffold' refPackage=STRING;

Rule :
	'rule' name=ID
		when=WhenBlock
		then=ThenBlock
	;

WhenBlock :
	'when' ('{'
		matches += Match*
	'}'
	| matches += Match);

Binding : Match | Param | Statement;

Match :
	(var=Variable ':')? type=[ecore::EClass] ('(' (params += Param (',' params += Param)*)? ')')?;

Variable :
	name = ID;

Param :
	 property=BindingExpression (':' var=Variable)?;

BindingExpression returns Expression :
	BindingExpressionHigh ({Operation.left=current} 
		op=OPERATOR_LOW_PRIORITY right=BindingExpression)?
	;

BindingExpressionHigh returns Expression :
	BindingTerminalExpression ({Operation.left=current} 
		op=OPERATOR_HIGH_PRIORITY right=BindingExpressionHigh)?
	;

BindingTerminalExpression returns Expression:
	'(' BindingExpression ')'
	| FeatureRefLiteral
	| {NotExpression} '!' exp=BindingTerminalExpression
	| {FunctionLiteral} function=[Function] ('(' exp=BindingExpression ')')
	| PrimitiveLiteral
	;

Expression returns Expression:
	ExpressionHigh ({Operation.left=current} 
	op=OPERATOR_LOW_PRIORITY right=Expression)?
	;

ExpressionHigh returns Expression :
	TerminalExpression ({Operation.left=current} 
	op=OPERATOR_HIGH_PRIORITY right=ExpressionHigh)?
	;

TerminalExpression returns Expression:
	'(' Expression ')'
	| VarRefLiteral
	| CreateClass
	| {NotExpression} '!' exp=TerminalExpression
	| {FunctionLiteral} function=[Function] ('(' (arguments+=Expression ( ',' arguments+=Expression)* )? ')')
	| PrimitiveLiteral
	;

PrimitiveLiteral returns Expression:
	ListLiteral
	| StringLiteral
	| NullLiteral
	| {IntLiteral} value=INT
	| {BooleanLiteral} value=BOOLEAN
	| {FloatLiteral} value=FLOAT
	;

terminal OPERATOR_HIGH_PRIORITY: '<'|'>'|'='|'!='|'>='|'<='|'/'|'*';
terminal OPERATOR_LOW_PRIORITY: '+'|'-';

FeatureRefLiteral :
	 ref=[ecore::EStructuralFeature];

ThenBlock :
	('then' | '->') ('{'
		statements += Statement*
	'}'
	| statements += Statement);

Statement : CreateStatement | UpdateStatement;

CreateStatement :
	(var=Variable ':')? expression=Expression;

CreateClass :
	'new' type=[ecore::EClass] ('{' (setters += Setter (',' setters += Setter)*)? '}')?;

StringLiteral :
	value=STRING;

NullLiteral : 'null';

ListLiteral :
	'[' (items+=Expression (',' items+=Expression)*)? ']';

VarRefLiteral :
	'$' varRef=[Variable];

Setter :
	property=[ecore::EStructuralFeature] (':'|'+=') expression=Expression (guard?='guard')?;

Function:
	'function' name=ID javaClass=[types::JvmGenericType|FQN] '#' operation=[types::JvmOperation|ID]
	;

UpdateStatement :
	'update' varRef=[Variable] ('{' (setters += Setter (',' setters += Setter)*)? '}')?;

FQN: ID ('.' ID)*;
OperationFQN: FQN '(' ( FQN (',' FQN)* )? ')';

terminal BOOLEAN returns ecore::EBoolean: 'true' | 'false';
terminal FLOAT returns ecore::EFloat: ('-')?('0'..'9')+'.'('0'..'9');
terminal INT returns ecore::EInt: ('-')?('0'..'9')+;
