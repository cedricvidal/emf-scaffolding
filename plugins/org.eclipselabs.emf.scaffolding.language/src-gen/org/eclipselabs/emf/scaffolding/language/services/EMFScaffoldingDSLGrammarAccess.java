/*
* generated by Xtext
*/

package org.eclipselabs.emf.scaffolding.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EMFScaffoldingDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScaffoldingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scaffolding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScaffoldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cScaffoldScaffoldParserRuleCall_0_0 = (RuleCall)cScaffoldAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsScaffoldingElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Scaffolding:
		//	scaffold=Scaffold elements+=ScaffoldingElement*;
		public ParserRule getRule() { return rule; }

		//scaffold=Scaffold elements+=ScaffoldingElement*
		public Group getGroup() { return cGroup; }

		//scaffold=Scaffold
		public Assignment getScaffoldAssignment_0() { return cScaffoldAssignment_0; }

		//Scaffold
		public RuleCall getScaffoldScaffoldParserRuleCall_0_0() { return cScaffoldScaffoldParserRuleCall_0_0; }

		//elements+=ScaffoldingElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//ScaffoldingElement
		public RuleCall getElementsScaffoldingElementParserRuleCall_1_0() { return cElementsScaffoldingElementParserRuleCall_1_0; }
	}

	public class ScaffoldingElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScaffoldingElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ScaffoldingElement:
		//	Rule | Function;
		public ParserRule getRule() { return rule; }

		//Rule | Function
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rule
		public RuleCall getRuleParserRuleCall_0() { return cRuleParserRuleCall_0; }

		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}

	public class ScaffoldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scaffold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScaffoldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefPackageEPackageCrossReference_1_0 = (CrossReference)cRefPackageAssignment_1.eContents().get(0);
		private final RuleCall cRefPackageEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cRefPackageEPackageCrossReference_1_0.eContents().get(1);
		
		//Scaffold:
		//	"scaffold" refPackage=[ecore::EPackage|STRING];
		public ParserRule getRule() { return rule; }

		//"scaffold" refPackage=[ecore::EPackage|STRING]
		public Group getGroup() { return cGroup; }

		//"scaffold"
		public Keyword getScaffoldKeyword_0() { return cScaffoldKeyword_0; }

		//refPackage=[ecore::EPackage|STRING]
		public Assignment getRefPackageAssignment_1() { return cRefPackageAssignment_1; }

		//[ecore::EPackage|STRING]
		public CrossReference getRefPackageEPackageCrossReference_1_0() { return cRefPackageEPackageCrossReference_1_0; }

		//STRING
		public RuleCall getRefPackageEPackageSTRINGTerminalRuleCall_1_0_1() { return cRefPackageEPackageSTRINGTerminalRuleCall_1_0_1; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cWhenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhenWhenBlockParserRuleCall_2_0 = (RuleCall)cWhenAssignment_2.eContents().get(0);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenThenBlockParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//Rule:
		//	"rule" name=ID when=WhenBlock then=ThenBlock;
		public ParserRule getRule() { return rule; }

		//"rule" name=ID when=WhenBlock then=ThenBlock
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//when=WhenBlock
		public Assignment getWhenAssignment_2() { return cWhenAssignment_2; }

		//WhenBlock
		public RuleCall getWhenWhenBlockParserRuleCall_2_0() { return cWhenWhenBlockParserRuleCall_2_0; }

		//then=ThenBlock
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//ThenBlock
		public RuleCall getThenThenBlockParserRuleCall_3_0() { return cThenThenBlockParserRuleCall_3_0; }
	}

	public class WhenBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhenBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cMatchesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMatchesMatchParserRuleCall_2_0_1_0 = (RuleCall)cMatchesAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cMatchesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cMatchesMatchParserRuleCall_2_1_0 = (RuleCall)cMatchesAssignment_2_1.eContents().get(0);
		
		//WhenBlock:
		//	{WhenBlock} "when" ("{" matches+=Match* "}" | matches+=Match);
		public ParserRule getRule() { return rule; }

		//{WhenBlock} "when" ("{" matches+=Match* "}" | matches+=Match)
		public Group getGroup() { return cGroup; }

		//{WhenBlock}
		public Action getWhenBlockAction_0() { return cWhenBlockAction_0; }

		//"when"
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//"{" matches+=Match* "}" | matches+=Match
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" matches+=Match* "}"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//matches+=Match*
		public Assignment getMatchesAssignment_2_0_1() { return cMatchesAssignment_2_0_1; }

		//Match
		public RuleCall getMatchesMatchParserRuleCall_2_0_1_0() { return cMatchesMatchParserRuleCall_2_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_2() { return cRightCurlyBracketKeyword_2_0_2; }

		//matches+=Match
		public Assignment getMatchesAssignment_2_1() { return cMatchesAssignment_2_1; }

		//Match
		public RuleCall getMatchesMatchParserRuleCall_2_1_0() { return cMatchesMatchParserRuleCall_2_1_0; }
	}

	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMatchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Binding:
		//	Match | Param | Statement;
		public ParserRule getRule() { return rule; }

		//Match | Param | Statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Match
		public RuleCall getMatchParserRuleCall_0() { return cMatchParserRuleCall_0; }

		//Param
		public RuleCall getParamParserRuleCall_1() { return cParamParserRuleCall_1; }

		//Statement
		public RuleCall getStatementParserRuleCall_2() { return cStatementParserRuleCall_2; }
	}

	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Match");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0_0 = (RuleCall)cVarAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEClassCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_2_1_0_0 = (RuleCall)cParamsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_2_1_1_1_0 = (RuleCall)cParamsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Match:
		//	(var=Variable ":")? type=[ecore::EClass] ("(" (params+=Param ("," params+=Param)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//(var=Variable ":")? type=[ecore::EClass] ("(" (params+=Param ("," params+=Param)*)? ")")?
		public Group getGroup() { return cGroup; }

		//(var=Variable ":")?
		public Group getGroup_0() { return cGroup_0; }

		//var=Variable
		public Assignment getVarAssignment_0_0() { return cVarAssignment_0_0; }

		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0_0() { return cVarVariableParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_1_0() { return cTypeEClassCrossReference_1_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_1_0_1() { return cTypeEClassIDTerminalRuleCall_1_0_1; }

		//("(" (params+=Param ("," params+=Param)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(params+=Param ("," params+=Param)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//params+=Param
		public Assignment getParamsAssignment_2_1_0() { return cParamsAssignment_2_1_0; }

		//Param
		public RuleCall getParamsParamParserRuleCall_2_1_0_0() { return cParamsParamParserRuleCall_2_1_0_0; }

		//("," params+=Param)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//params+=Param
		public Assignment getParamsAssignment_2_1_1_1() { return cParamsAssignment_2_1_1_1; }

		//Param
		public RuleCall getParamsParamParserRuleCall_2_1_1_1_0() { return cParamsParamParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyExpressionParserRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarVariableParserRuleCall_1_1_0 = (RuleCall)cVarAssignment_1_1.eContents().get(0);
		
		//Param:
		//	property=Expression (":" var=Variable)?;
		public ParserRule getRule() { return rule; }

		//property=Expression (":" var=Variable)?
		public Group getGroup() { return cGroup; }

		//property=Expression
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//Expression
		public RuleCall getPropertyExpressionParserRuleCall_0_0() { return cPropertyExpressionParserRuleCall_0_0; }

		//(":" var=Variable)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//var=Variable
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }

		//Variable
		public RuleCall getVarVariableParserRuleCall_1_1_0() { return cVarVariableParserRuleCall_1_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionHighParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOPERATOR_LOW_PRIORITYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	ExpressionHigh ({Operation.left=current} op=OPERATOR_LOW_PRIORITY right=Expression)?;
		public ParserRule getRule() { return rule; }

		//ExpressionHigh ({Operation.left=current} op=OPERATOR_LOW_PRIORITY right=Expression)?
		public Group getGroup() { return cGroup; }

		//ExpressionHigh
		public RuleCall getExpressionHighParserRuleCall_0() { return cExpressionHighParserRuleCall_0; }

		//({Operation.left=current} op=OPERATOR_LOW_PRIORITY right=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }

		//op=OPERATOR_LOW_PRIORITY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OPERATOR_LOW_PRIORITY
		public RuleCall getOpOPERATOR_LOW_PRIORITYTerminalRuleCall_1_1_0() { return cOpOPERATOR_LOW_PRIORITYTerminalRuleCall_1_1_0; }

		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
	}

	public class ExpressionHighElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionHigh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOPERATOR_HIGH_PRIORITYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionHighParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionHigh returns Expression:
		//	TerminalExpression ({Operation.left=current} op=OPERATOR_HIGH_PRIORITY right=ExpressionHigh)?;
		public ParserRule getRule() { return rule; }

		//TerminalExpression ({Operation.left=current} op=OPERATOR_HIGH_PRIORITY right=ExpressionHigh)?
		public Group getGroup() { return cGroup; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//({Operation.left=current} op=OPERATOR_HIGH_PRIORITY right=ExpressionHigh)?
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }

		//op=OPERATOR_HIGH_PRIORITY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OPERATOR_HIGH_PRIORITY
		public RuleCall getOpOPERATOR_HIGH_PRIORITYTerminalRuleCall_1_1_0() { return cOpOPERATOR_HIGH_PRIORITYTerminalRuleCall_1_1_0; }

		//right=ExpressionHigh
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionHigh
		public RuleCall getRightExpressionHighParserRuleCall_1_2_0() { return cRightExpressionHighParserRuleCall_1_2_0; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cCreateClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNotExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpTerminalExpressionParserRuleCall_2_2_0 = (RuleCall)cExpAssignment_2_2.eContents().get(0);
		private final RuleCall cSymbolRefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cFunctionLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cFunctionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cFunctionFunctionCrossReference_4_1_0 = (CrossReference)cFunctionAssignment_4_1.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_4_1_0_1 = (RuleCall)cFunctionFunctionCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Assignment cArgumentsAssignment_4_3_0 = (Assignment)cGroup_4_3.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_3_0_0 = (RuleCall)cArgumentsAssignment_4_3_0.eContents().get(0);
		private final Group cGroup_4_3_1 = (Group)cGroup_4_3.eContents().get(1);
		private final Keyword cCommaKeyword_4_3_1_0 = (Keyword)cGroup_4_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_3_1_1 = (Assignment)cGroup_4_3_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_3_1_1_0 = (RuleCall)cArgumentsAssignment_4_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final RuleCall cPrimitiveLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TerminalExpression returns Expression:
		//	"(" Expression ")" | CreateClass | {NotExpression} "!" exp=TerminalExpression | SymbolRef | {FunctionLiteral}
		//	function=[Function] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")" | PrimitiveLiteral;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | CreateClass | {NotExpression} "!" exp=TerminalExpression | SymbolRef | {FunctionLiteral}
		//function=[Function] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")" | PrimitiveLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//CreateClass
		public RuleCall getCreateClassParserRuleCall_1() { return cCreateClassParserRuleCall_1; }

		//{NotExpression} "!" exp=TerminalExpression
		public Group getGroup_2() { return cGroup_2; }

		//{NotExpression}
		public Action getNotExpressionAction_2_0() { return cNotExpressionAction_2_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_2_1() { return cExclamationMarkKeyword_2_1; }

		//exp=TerminalExpression
		public Assignment getExpAssignment_2_2() { return cExpAssignment_2_2; }

		//TerminalExpression
		public RuleCall getExpTerminalExpressionParserRuleCall_2_2_0() { return cExpTerminalExpressionParserRuleCall_2_2_0; }

		//SymbolRef
		public RuleCall getSymbolRefParserRuleCall_3() { return cSymbolRefParserRuleCall_3; }

		//{FunctionLiteral} function=[Function] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup_4() { return cGroup_4; }

		//{FunctionLiteral}
		public Action getFunctionLiteralAction_4_0() { return cFunctionLiteralAction_4_0; }

		//function=[Function]
		public Assignment getFunctionAssignment_4_1() { return cFunctionAssignment_4_1; }

		//[Function]
		public CrossReference getFunctionFunctionCrossReference_4_1_0() { return cFunctionFunctionCrossReference_4_1_0; }

		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_4_1_0_1() { return cFunctionFunctionIDTerminalRuleCall_4_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_3_0() { return cArgumentsAssignment_4_3_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_3_0_0() { return cArgumentsExpressionParserRuleCall_4_3_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_4_3_1() { return cGroup_4_3_1; }

		//","
		public Keyword getCommaKeyword_4_3_1_0() { return cCommaKeyword_4_3_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_3_1_1() { return cArgumentsAssignment_4_3_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_3_1_1_0() { return cArgumentsExpressionParserRuleCall_4_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//PrimitiveLiteral
		public RuleCall getPrimitiveLiteralParserRuleCall_5() { return cPrimitiveLiteralParserRuleCall_5; }
	}

	public class SymbolRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSymbolRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefSymbolCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefSymbolIDTerminalRuleCall_1_0_1 = (RuleCall)cRefSymbolCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cSelectorSymbolAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cSegmentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSegmentSelectorSegmentParserRuleCall_2_1_0 = (RuleCall)cSegmentAssignment_2_1.eContents().get(0);
		
		//SymbolRef returns Expression:
		//	{SymbolRef} ref=[Symbol] ({Selector.symbol=current} segment=SelectorSegment)?;
		public ParserRule getRule() { return rule; }

		//{SymbolRef} ref=[Symbol] ({Selector.symbol=current} segment=SelectorSegment)?
		public Group getGroup() { return cGroup; }

		//{SymbolRef}
		public Action getSymbolRefAction_0() { return cSymbolRefAction_0; }

		//ref=[Symbol]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[Symbol]
		public CrossReference getRefSymbolCrossReference_1_0() { return cRefSymbolCrossReference_1_0; }

		//ID
		public RuleCall getRefSymbolIDTerminalRuleCall_1_0_1() { return cRefSymbolIDTerminalRuleCall_1_0_1; }

		//({Selector.symbol=current} segment=SelectorSegment)?
		public Group getGroup_2() { return cGroup_2; }

		//{Selector.symbol=current}
		public Action getSelectorSymbolAction_2_0() { return cSelectorSymbolAction_2_0; }

		//segment=SelectorSegment
		public Assignment getSegmentAssignment_2_1() { return cSegmentAssignment_2_1; }

		//SelectorSegment
		public RuleCall getSegmentSelectorSegmentParserRuleCall_2_1_0() { return cSegmentSelectorSegmentParserRuleCall_2_1_0; }
	}

	public class PrimitiveLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIntLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBooleanLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cFloatLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		
		//PrimitiveLiteral returns Expression:
		//	ListLiteral | StringLiteral | NullLiteral | {IntLiteral} value=INT | {BooleanLiteral} value=BOOLEAN | {FloatLiteral}
		//	value=FLOAT;
		public ParserRule getRule() { return rule; }

		//ListLiteral | StringLiteral | NullLiteral | {IntLiteral} value=INT | {BooleanLiteral} value=BOOLEAN | {FloatLiteral}
		//value=FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ListLiteral
		public RuleCall getListLiteralParserRuleCall_0() { return cListLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_2() { return cNullLiteralParserRuleCall_2; }

		//{IntLiteral} value=INT
		public Group getGroup_3() { return cGroup_3; }

		//{IntLiteral}
		public Action getIntLiteralAction_3_0() { return cIntLiteralAction_3_0; }

		//value=INT
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_1_0() { return cValueINTTerminalRuleCall_3_1_0; }

		//{BooleanLiteral} value=BOOLEAN
		public Group getGroup_4() { return cGroup_4; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_4_0() { return cBooleanLiteralAction_4_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_4_1_0() { return cValueBOOLEANTerminalRuleCall_4_1_0; }

		//{FloatLiteral} value=FLOAT
		public Group getGroup_5() { return cGroup_5; }

		//{FloatLiteral}
		public Action getFloatLiteralAction_5_0() { return cFloatLiteralAction_5_0; }

		//value=FLOAT
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_5_1_0() { return cValueFLOATTerminalRuleCall_5_1_0; }
	}

	public class SelectorSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectorSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAttributeRefEStructuralFeatureCrossReference_1_0 = (CrossReference)cAttributeRefAssignment_1.eContents().get(0);
		private final RuleCall cAttributeRefEStructuralFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cAttributeRefEStructuralFeatureCrossReference_1_0.eContents().get(1);
		private final Assignment cNextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNextSelectorSegmentParserRuleCall_2_0 = (RuleCall)cNextAssignment_2.eContents().get(0);
		
		//SelectorSegment:
		//	"." attributeRef=[ecore::EStructuralFeature] next=SelectorSegment?;
		public ParserRule getRule() { return rule; }

		//"." attributeRef=[ecore::EStructuralFeature] next=SelectorSegment?
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//attributeRef=[ecore::EStructuralFeature]
		public Assignment getAttributeRefAssignment_1() { return cAttributeRefAssignment_1; }

		//[ecore::EStructuralFeature]
		public CrossReference getAttributeRefEStructuralFeatureCrossReference_1_0() { return cAttributeRefEStructuralFeatureCrossReference_1_0; }

		//ID
		public RuleCall getAttributeRefEStructuralFeatureIDTerminalRuleCall_1_0_1() { return cAttributeRefEStructuralFeatureIDTerminalRuleCall_1_0_1; }

		//next=SelectorSegment?
		public Assignment getNextAssignment_2() { return cNextAssignment_2; }

		//SelectorSegment
		public RuleCall getNextSelectorSegmentParserRuleCall_2_0() { return cNextSelectorSegmentParserRuleCall_2_0; }
	}

	public class FeatureRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureRef");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_0 = (CrossReference)cFeatureAssignment.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureIDTerminalRuleCall_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_0.eContents().get(1);
		
		//FeatureRef:
		//	feature=[ecore::EStructuralFeature];
		public ParserRule getRule() { return rule; }

		//feature=[ecore::EStructuralFeature]
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }

		//[ecore::EStructuralFeature]
		public CrossReference getFeatureEStructuralFeatureCrossReference_0() { return cFeatureEStructuralFeatureCrossReference_0; }

		//ID
		public RuleCall getFeatureEStructuralFeatureIDTerminalRuleCall_0_1() { return cFeatureEStructuralFeatureIDTerminalRuleCall_0_1; }
	}

	public class ThenBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThenBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThenBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cThenKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_2_0_1_0_0 = (RuleCall)cStatementsAssignment_2_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_1 = (Keyword)cGroup_2_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		
		//ThenBlock:
		//	{ThenBlock} ("then" | "->") ("{" (statements+=Statement ";")* "}" | statements+=Statement);
		public ParserRule getRule() { return rule; }

		//{ThenBlock} ("then" | "->") ("{" (statements+=Statement ";")* "}" | statements+=Statement)
		public Group getGroup() { return cGroup; }

		//{ThenBlock}
		public Action getThenBlockAction_0() { return cThenBlockAction_0; }

		//"then" | "->"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"then"
		public Keyword getThenKeyword_1_0() { return cThenKeyword_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }

		//"{" (statements+=Statement ";")* "}" | statements+=Statement
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" (statements+=Statement ";")* "}"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//(statements+=Statement ";")*
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//statements+=Statement
		public Assignment getStatementsAssignment_2_0_1_0() { return cStatementsAssignment_2_0_1_0; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0_1_0_0() { return cStatementsStatementParserRuleCall_2_0_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1_1() { return cSemicolonKeyword_2_0_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_2() { return cRightCurlyBracketKeyword_2_0_2; }

		//statements+=Statement
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_1_0() { return cStatementsStatementParserRuleCall_2_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUpdateStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	CreateStatement | UpdateStatement;
		public ParserRule getRule() { return rule; }

		//CreateStatement | UpdateStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//CreateStatement
		public RuleCall getCreateStatementParserRuleCall_0() { return cCreateStatementParserRuleCall_0; }

		//UpdateStatement
		public RuleCall getUpdateStatementParserRuleCall_1() { return cUpdateStatementParserRuleCall_1; }
	}

	public class CreateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CreateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0_0 = (RuleCall)cVarAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//CreateStatement:
		//	(var=Variable ":")? expression=Expression;
		public ParserRule getRule() { return rule; }

		//(var=Variable ":")? expression=Expression
		public Group getGroup() { return cGroup; }

		//(var=Variable ":")?
		public Group getGroup_0() { return cGroup_0; }

		//var=Variable
		public Assignment getVarAssignment_0_0() { return cVarAssignment_0_0; }

		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0_0() { return cVarVariableParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class CreateClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CreateClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEClassCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cSettersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cSettersSetterParserRuleCall_2_1_0_0 = (RuleCall)cSettersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cSettersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cSettersSetterParserRuleCall_2_1_1_1_0 = (RuleCall)cSettersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//CreateClass:
		//	"new" type=[ecore::EClass] ("{" (setters+=Setter ("," setters+=Setter)*)? "}")?;
		public ParserRule getRule() { return rule; }

		//"new" type=[ecore::EClass] ("{" (setters+=Setter ("," setters+=Setter)*)? "}")?
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_1_0() { return cTypeEClassCrossReference_1_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_1_0_1() { return cTypeEClassIDTerminalRuleCall_1_0_1; }

		//("{" (setters+=Setter ("," setters+=Setter)*)? "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//(setters+=Setter ("," setters+=Setter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//setters+=Setter
		public Assignment getSettersAssignment_2_1_0() { return cSettersAssignment_2_1_0; }

		//Setter
		public RuleCall getSettersSetterParserRuleCall_2_1_0_0() { return cSettersSetterParserRuleCall_2_1_0_0; }

		//("," setters+=Setter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//setters+=Setter
		public Assignment getSettersAssignment_2_1_1_1() { return cSettersAssignment_2_1_1_1; }

		//Setter
		public RuleCall getSettersSetterParserRuleCall_2_1_1_1_0() { return cSettersSetterParserRuleCall_2_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral:
		//	{NullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class ListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cItemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cItemsExpressionParserRuleCall_2_0_0 = (RuleCall)cItemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cItemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cItemsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cItemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListLiteral:
		//	{ListLiteral} "[" (items+=Expression ("," items+=Expression)*)? "]";
		public ParserRule getRule() { return rule; }

		//{ListLiteral} "[" (items+=Expression ("," items+=Expression)*)? "]"
		public Group getGroup() { return cGroup; }

		//{ListLiteral}
		public Action getListLiteralAction_0() { return cListLiteralAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(items+=Expression ("," items+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//items+=Expression
		public Assignment getItemsAssignment_2_0() { return cItemsAssignment_2_0; }

		//Expression
		public RuleCall getItemsExpressionParserRuleCall_2_0_0() { return cItemsExpressionParserRuleCall_2_0_0; }

		//("," items+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//items+=Expression
		public Assignment getItemsAssignment_2_1_1() { return cItemsAssignment_2_1_1; }

		//Expression
		public RuleCall getItemsExpressionParserRuleCall_2_1_1_0() { return cItemsExpressionParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class SetterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Setter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyEStructuralFeatureCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyEStructuralFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cPropertyEStructuralFeatureCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cGuardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cGuardGuardKeyword_3_0 = (Keyword)cGuardAssignment_3.eContents().get(0);
		
		//Setter:
		//	property=[ecore::EStructuralFeature] (":" | "+=") expression=Expression guard?="guard"?;
		public ParserRule getRule() { return rule; }

		//property=[ecore::EStructuralFeature] (":" | "+=") expression=Expression guard?="guard"?
		public Group getGroup() { return cGroup; }

		//property=[ecore::EStructuralFeature]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//[ecore::EStructuralFeature]
		public CrossReference getPropertyEStructuralFeatureCrossReference_0_0() { return cPropertyEStructuralFeatureCrossReference_0_0; }

		//ID
		public RuleCall getPropertyEStructuralFeatureIDTerminalRuleCall_0_0_1() { return cPropertyEStructuralFeatureIDTerminalRuleCall_0_0_1; }

		//":" | "+="
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1_1() { return cPlusSignEqualsSignKeyword_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//guard?="guard"?
		public Assignment getGuardAssignment_3() { return cGuardAssignment_3; }

		//"guard"
		public Keyword getGuardGuardKeyword_3_0() { return cGuardGuardKeyword_3_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cJavaClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cJavaClassJvmGenericTypeCrossReference_2_0 = (CrossReference)cJavaClassAssignment_2.eContents().get(0);
		private final RuleCall cJavaClassJvmGenericTypeFQNParserRuleCall_2_0_1 = (RuleCall)cJavaClassJvmGenericTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cOperationJvmOperationCrossReference_4_0 = (CrossReference)cOperationAssignment_4.eContents().get(0);
		private final RuleCall cOperationJvmOperationIDTerminalRuleCall_4_0_1 = (RuleCall)cOperationJvmOperationCrossReference_4_0.eContents().get(1);
		
		//Function:
		//	"function" name=ID javaClass=[types::JvmGenericType|FQN] "#" operation=[types::JvmOperation];
		public ParserRule getRule() { return rule; }

		//"function" name=ID javaClass=[types::JvmGenericType|FQN] "#" operation=[types::JvmOperation]
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//javaClass=[types::JvmGenericType|FQN]
		public Assignment getJavaClassAssignment_2() { return cJavaClassAssignment_2; }

		//[types::JvmGenericType|FQN]
		public CrossReference getJavaClassJvmGenericTypeCrossReference_2_0() { return cJavaClassJvmGenericTypeCrossReference_2_0; }

		//FQN
		public RuleCall getJavaClassJvmGenericTypeFQNParserRuleCall_2_0_1() { return cJavaClassJvmGenericTypeFQNParserRuleCall_2_0_1; }

		//"#"
		public Keyword getNumberSignKeyword_3() { return cNumberSignKeyword_3; }

		//operation=[types::JvmOperation]
		public Assignment getOperationAssignment_4() { return cOperationAssignment_4; }

		//[types::JvmOperation]
		public CrossReference getOperationJvmOperationCrossReference_4_0() { return cOperationJvmOperationCrossReference_4_0; }

		//ID
		public RuleCall getOperationJvmOperationIDTerminalRuleCall_4_0_1() { return cOperationJvmOperationIDTerminalRuleCall_4_0_1; }
	}

	public class UpdateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarRefVariableCrossReference_1_0 = (CrossReference)cVarRefAssignment_1.eContents().get(0);
		private final RuleCall cVarRefVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVarRefVariableCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cSettersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cSettersSetterParserRuleCall_2_1_0_0 = (RuleCall)cSettersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cSettersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cSettersSetterParserRuleCall_2_1_1_1_0 = (RuleCall)cSettersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//UpdateStatement:
		//	"update" varRef=[Variable] ("{" (setters+=Setter ("," setters+=Setter)*)? "}")?;
		public ParserRule getRule() { return rule; }

		//"update" varRef=[Variable] ("{" (setters+=Setter ("," setters+=Setter)*)? "}")?
		public Group getGroup() { return cGroup; }

		//"update"
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }

		//varRef=[Variable]
		public Assignment getVarRefAssignment_1() { return cVarRefAssignment_1; }

		//[Variable]
		public CrossReference getVarRefVariableCrossReference_1_0() { return cVarRefVariableCrossReference_1_0; }

		//ID
		public RuleCall getVarRefVariableIDTerminalRuleCall_1_0_1() { return cVarRefVariableIDTerminalRuleCall_1_0_1; }

		//("{" (setters+=Setter ("," setters+=Setter)*)? "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//(setters+=Setter ("," setters+=Setter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//setters+=Setter
		public Assignment getSettersAssignment_2_1_0() { return cSettersAssignment_2_1_0; }

		//Setter
		public RuleCall getSettersSetterParserRuleCall_2_1_0_0() { return cSettersSetterParserRuleCall_2_1_0_0; }

		//("," setters+=Setter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//setters+=Setter
		public Assignment getSettersAssignment_2_1_1_1() { return cSettersAssignment_2_1_1_1; }

		//Setter
		public RuleCall getSettersSetterParserRuleCall_2_1_1_1_0() { return cSettersSetterParserRuleCall_2_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class OperationFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cFQNParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cFQNParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OperationFQN returns ecore::EString:
		//	FQN "(" (FQN ("," FQN)*)? ")";
		public ParserRule getRule() { return rule; }

		//FQN "(" (FQN ("," FQN)*)? ")"
		public Group getGroup() { return cGroup; }

		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(FQN ("," FQN)*)?
		public Group getGroup_2() { return cGroup_2; }

		//FQN
		public RuleCall getFQNParserRuleCall_2_0() { return cFQNParserRuleCall_2_0; }

		//("," FQN)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//FQN
		public RuleCall getFQNParserRuleCall_2_1_1() { return cFQNParserRuleCall_2_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Symbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFeatureRefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Synthetic rules
		//// They are meant to bend the Xtext metamodel inference engine
		//Symbol:
		//	Variable | Function | Rule | FeatureRef;
		public ParserRule getRule() { return rule; }

		//Variable | Function | Rule | FeatureRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }

		//Rule
		public RuleCall getRuleParserRuleCall_2() { return cRuleParserRuleCall_2; }

		//FeatureRef
		public RuleCall getFeatureRefParserRuleCall_3() { return cFeatureRefParserRuleCall_3; }
	}

	public class SymbolStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolStructure");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SymbolStructure returns Symbol:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private ScaffoldingElements pScaffolding;
	private ScaffoldingElementElements pScaffoldingElement;
	private ScaffoldElements pScaffold;
	private RuleElements pRule;
	private WhenBlockElements pWhenBlock;
	private BindingElements pBinding;
	private MatchElements pMatch;
	private VariableElements pVariable;
	private ParamElements pParam;
	private ExpressionElements pExpression;
	private ExpressionHighElements pExpressionHigh;
	private TerminalExpressionElements pTerminalExpression;
	private SymbolRefElements pSymbolRef;
	private PrimitiveLiteralElements pPrimitiveLiteral;
	private SelectorSegmentElements pSelectorSegment;
	private TerminalRule tOPERATOR_HIGH_PRIORITY;
	private TerminalRule tOPERATOR_LOW_PRIORITY;
	private FeatureRefElements pFeatureRef;
	private ThenBlockElements pThenBlock;
	private StatementElements pStatement;
	private CreateStatementElements pCreateStatement;
	private CreateClassElements pCreateClass;
	private StringLiteralElements pStringLiteral;
	private NullLiteralElements pNullLiteral;
	private ListLiteralElements pListLiteral;
	private SetterElements pSetter;
	private FunctionElements pFunction;
	private UpdateStatementElements pUpdateStatement;
	private FQNElements pFQN;
	private OperationFQNElements pOperationFQN;
	private TerminalRule tBOOLEAN;
	private TerminalRule tFLOAT;
	private TerminalRule tINT;
	private SymbolElements pSymbol;
	private SymbolStructureElements pSymbolStructure;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EMFScaffoldingDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Scaffolding:
	//	scaffold=Scaffold elements+=ScaffoldingElement*;
	public ScaffoldingElements getScaffoldingAccess() {
		return (pScaffolding != null) ? pScaffolding : (pScaffolding = new ScaffoldingElements());
	}
	
	public ParserRule getScaffoldingRule() {
		return getScaffoldingAccess().getRule();
	}

	//ScaffoldingElement:
	//	Rule | Function;
	public ScaffoldingElementElements getScaffoldingElementAccess() {
		return (pScaffoldingElement != null) ? pScaffoldingElement : (pScaffoldingElement = new ScaffoldingElementElements());
	}
	
	public ParserRule getScaffoldingElementRule() {
		return getScaffoldingElementAccess().getRule();
	}

	//Scaffold:
	//	"scaffold" refPackage=[ecore::EPackage|STRING];
	public ScaffoldElements getScaffoldAccess() {
		return (pScaffold != null) ? pScaffold : (pScaffold = new ScaffoldElements());
	}
	
	public ParserRule getScaffoldRule() {
		return getScaffoldAccess().getRule();
	}

	//Rule:
	//	"rule" name=ID when=WhenBlock then=ThenBlock;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//WhenBlock:
	//	{WhenBlock} "when" ("{" matches+=Match* "}" | matches+=Match);
	public WhenBlockElements getWhenBlockAccess() {
		return (pWhenBlock != null) ? pWhenBlock : (pWhenBlock = new WhenBlockElements());
	}
	
	public ParserRule getWhenBlockRule() {
		return getWhenBlockAccess().getRule();
	}

	//Binding:
	//	Match | Param | Statement;
	public BindingElements getBindingAccess() {
		return (pBinding != null) ? pBinding : (pBinding = new BindingElements());
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//Match:
	//	(var=Variable ":")? type=[ecore::EClass] ("(" (params+=Param ("," params+=Param)*)? ")")?;
	public MatchElements getMatchAccess() {
		return (pMatch != null) ? pMatch : (pMatch = new MatchElements());
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}

	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Param:
	//	property=Expression (":" var=Variable)?;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//Expression:
	//	ExpressionHigh ({Operation.left=current} op=OPERATOR_LOW_PRIORITY right=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//ExpressionHigh returns Expression:
	//	TerminalExpression ({Operation.left=current} op=OPERATOR_HIGH_PRIORITY right=ExpressionHigh)?;
	public ExpressionHighElements getExpressionHighAccess() {
		return (pExpressionHigh != null) ? pExpressionHigh : (pExpressionHigh = new ExpressionHighElements());
	}
	
	public ParserRule getExpressionHighRule() {
		return getExpressionHighAccess().getRule();
	}

	//TerminalExpression returns Expression:
	//	"(" Expression ")" | CreateClass | {NotExpression} "!" exp=TerminalExpression | SymbolRef | {FunctionLiteral}
	//	function=[Function] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")" | PrimitiveLiteral;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//SymbolRef returns Expression:
	//	{SymbolRef} ref=[Symbol] ({Selector.symbol=current} segment=SelectorSegment)?;
	public SymbolRefElements getSymbolRefAccess() {
		return (pSymbolRef != null) ? pSymbolRef : (pSymbolRef = new SymbolRefElements());
	}
	
	public ParserRule getSymbolRefRule() {
		return getSymbolRefAccess().getRule();
	}

	//PrimitiveLiteral returns Expression:
	//	ListLiteral | StringLiteral | NullLiteral | {IntLiteral} value=INT | {BooleanLiteral} value=BOOLEAN | {FloatLiteral}
	//	value=FLOAT;
	public PrimitiveLiteralElements getPrimitiveLiteralAccess() {
		return (pPrimitiveLiteral != null) ? pPrimitiveLiteral : (pPrimitiveLiteral = new PrimitiveLiteralElements());
	}
	
	public ParserRule getPrimitiveLiteralRule() {
		return getPrimitiveLiteralAccess().getRule();
	}

	//SelectorSegment:
	//	"." attributeRef=[ecore::EStructuralFeature] next=SelectorSegment?;
	public SelectorSegmentElements getSelectorSegmentAccess() {
		return (pSelectorSegment != null) ? pSelectorSegment : (pSelectorSegment = new SelectorSegmentElements());
	}
	
	public ParserRule getSelectorSegmentRule() {
		return getSelectorSegmentAccess().getRule();
	}

	//terminal OPERATOR_HIGH_PRIORITY:
	//	"<" | ">" | "=" | "!=" | ">=" | "<=" | "/" | "*";
	public TerminalRule getOPERATOR_HIGH_PRIORITYRule() {
		return (tOPERATOR_HIGH_PRIORITY != null) ? tOPERATOR_HIGH_PRIORITY : (tOPERATOR_HIGH_PRIORITY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR_HIGH_PRIORITY"));
	} 

	//terminal OPERATOR_LOW_PRIORITY:
	//	"+" | "-";
	public TerminalRule getOPERATOR_LOW_PRIORITYRule() {
		return (tOPERATOR_LOW_PRIORITY != null) ? tOPERATOR_LOW_PRIORITY : (tOPERATOR_LOW_PRIORITY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR_LOW_PRIORITY"));
	} 

	//FeatureRef:
	//	feature=[ecore::EStructuralFeature];
	public FeatureRefElements getFeatureRefAccess() {
		return (pFeatureRef != null) ? pFeatureRef : (pFeatureRef = new FeatureRefElements());
	}
	
	public ParserRule getFeatureRefRule() {
		return getFeatureRefAccess().getRule();
	}

	//ThenBlock:
	//	{ThenBlock} ("then" | "->") ("{" (statements+=Statement ";")* "}" | statements+=Statement);
	public ThenBlockElements getThenBlockAccess() {
		return (pThenBlock != null) ? pThenBlock : (pThenBlock = new ThenBlockElements());
	}
	
	public ParserRule getThenBlockRule() {
		return getThenBlockAccess().getRule();
	}

	//Statement:
	//	CreateStatement | UpdateStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//CreateStatement:
	//	(var=Variable ":")? expression=Expression;
	public CreateStatementElements getCreateStatementAccess() {
		return (pCreateStatement != null) ? pCreateStatement : (pCreateStatement = new CreateStatementElements());
	}
	
	public ParserRule getCreateStatementRule() {
		return getCreateStatementAccess().getRule();
	}

	//CreateClass:
	//	"new" type=[ecore::EClass] ("{" (setters+=Setter ("," setters+=Setter)*)? "}")?;
	public CreateClassElements getCreateClassAccess() {
		return (pCreateClass != null) ? pCreateClass : (pCreateClass = new CreateClassElements());
	}
	
	public ParserRule getCreateClassRule() {
		return getCreateClassAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//NullLiteral:
	//	{NullLiteral} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//ListLiteral:
	//	{ListLiteral} "[" (items+=Expression ("," items+=Expression)*)? "]";
	public ListLiteralElements getListLiteralAccess() {
		return (pListLiteral != null) ? pListLiteral : (pListLiteral = new ListLiteralElements());
	}
	
	public ParserRule getListLiteralRule() {
		return getListLiteralAccess().getRule();
	}

	//Setter:
	//	property=[ecore::EStructuralFeature] (":" | "+=") expression=Expression guard?="guard"?;
	public SetterElements getSetterAccess() {
		return (pSetter != null) ? pSetter : (pSetter = new SetterElements());
	}
	
	public ParserRule getSetterRule() {
		return getSetterAccess().getRule();
	}

	//Function:
	//	"function" name=ID javaClass=[types::JvmGenericType|FQN] "#" operation=[types::JvmOperation];
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//UpdateStatement:
	//	"update" varRef=[Variable] ("{" (setters+=Setter ("," setters+=Setter)*)? "}")?;
	public UpdateStatementElements getUpdateStatementAccess() {
		return (pUpdateStatement != null) ? pUpdateStatement : (pUpdateStatement = new UpdateStatementElements());
	}
	
	public ParserRule getUpdateStatementRule() {
		return getUpdateStatementAccess().getRule();
	}

	//FQN returns ecore::EString:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//OperationFQN returns ecore::EString:
	//	FQN "(" (FQN ("," FQN)*)? ")";
	public OperationFQNElements getOperationFQNAccess() {
		return (pOperationFQN != null) ? pOperationFQN : (pOperationFQN = new OperationFQNElements());
	}
	
	public ParserRule getOperationFQNRule() {
		return getOperationFQNAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal FLOAT returns ecore::EFloat:
	//	"-"? "0".."9"+ "." "0".."9";
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//// Synthetic rules
	//// They are meant to bend the Xtext metamodel inference engine
	//Symbol:
	//	Variable | Function | Rule | FeatureRef;
	public SymbolElements getSymbolAccess() {
		return (pSymbol != null) ? pSymbol : (pSymbol = new SymbolElements());
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}

	//SymbolStructure returns Symbol:
	//	name=ID;
	public SymbolStructureElements getSymbolStructureAccess() {
		return (pSymbolStructure != null) ? pSymbolStructure : (pSymbolStructure = new SymbolStructureElements());
	}
	
	public ParserRule getSymbolStructureRule() {
		return getSymbolStructureAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
